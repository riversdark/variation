{
  
    
        "post0": {
            "title": "Binning 2D data and doing JV assignments",
            "content": "Generate data from 2D Gaussian distribution . Here we generate random samples from a 2D Gaussian distribution and plot the data. . %config InlineBackend.figure_format=&#39;retina&#39; import numpy as np import pandas as pd import matplotlib.pyplot as plt from scipy.spatial.distance import cdist from lapjv import lapjv np.random.seed(5) . mean = (-4, 5) cov = [[1, 0.8], [0.8, 1]] N = 25471 X = np.random.multivariate_normal(mean, cov, N) . plt.hist2d(X[:, 0], X[:, 1], bins=100); . plt.scatter(X[:, 0], X[:, 1], s=0.1); . Split the data by percentiles . df = pd.DataFrame(X, columns=[&#39;x&#39;, &#39;y&#39;]) . n_cuts = 4 . pcts = np.linspace(0, 100, n_cuts+1) . pcts . array([ 0., 25., 50., 75., 100.]) . check the global percentiles . pcts_x = [np.percentile(df[&#39;x&#39;], p) for p in pcts] pcts_y = [np.percentile(df[&#39;y&#39;], p) for p in pcts] . pcts_x . [-8.056800776237175, -4.688114391830573, -4.006911789051436, -3.336958328368386, -0.25323804036638853] . pcts_y . [1.3164850445961904, 4.322595717077761, 4.996182271178584, 5.672982753494438, 9.244821243128097] . len(pcts_x), len(pcts_x) . (5, 5) . generate catogorical colors for visualisation . colors = [&#39;#%06X&#39; % np.random.randint(0, 0xFFFFFF) for _ in range(n_cuts**2)] colors . [&#39;#933F5B&#39;, &#39;#8BB5EE&#39;, &#39;#917E5D&#39;, &#39;#5EECD1&#39;, &#39;#4C20D8&#39;, &#39;#27B32C&#39;, &#39;#E15209&#39;, &#39;#21CDB3&#39;, &#39;#B7007D&#39;, &#39;#F866AA&#39;, &#39;#F97865&#39;, &#39;#F21DFA&#39;, &#39;#8E9A13&#39;, &#39;#2EA282&#39;, &#39;#E64841&#39;, &#39;#207798&#39;] . split the data according to the x and y percentiles . pcts_x = [np.percentile(df[&#39;x&#39;], p) for p in pcts] fig, axes = plt.subplots(1, n_cuts, figsize=(12, 4), sharex=True, sharey=True) for i in range(n_cuts): di = df[(df[&#39;x&#39;]&gt;=pcts_x[i]) &amp; (df[&#39;x&#39;]&lt;=pcts_x[i+1])] print(i, len(di)) axes[i].scatter(di[&#39;x&#39;], di[&#39;y&#39;], s=0.1, color=colors[i]) . 0 6368 1 6368 2 6368 3 6368 . pcts_y = [np.percentile(df[&#39;y&#39;], p) for p in pcts] fig, axes = plt.subplots(1, n_cuts, figsize=(12, 4), sharex=True, sharey=True) for j in range(n_cuts): dj = df[(df[&#39;y&#39;]&gt;=pcts_y[j]) &amp; (df[&#39;y&#39;]&lt;=pcts_y[j+1])] print(j, len(dj)) axes[j].scatter(dj[&#39;x&#39;], dj[&#39;y&#39;], s=0.1, color=colors[j]) . 0 6368 1 6368 2 6368 3 6368 . split the data along one axis, then along the other axis. . Note here that when splitting the data sequentially, we can&#39;t use the overall percentiles, but the percentiles of the split data. . fig, axes = plt.subplots(n_cuts, n_cuts, figsize=(24, 24), sharex=True, sharey=True) for i in range(n_cuts): pcts_x = [np.percentile(df[&#39;x&#39;], p) for p in pcts] di = df[(df[&#39;x&#39;]&gt;=pcts_x[i]) &amp; (df[&#39;x&#39;]&lt;=pcts_x[i+1])] print(i, len(di)) pcts_y = [np.percentile(di[&#39;y&#39;], p) for p in pcts] for j in range(n_cuts): dj = di[(di[&#39;y&#39;]&gt;=pcts_y[j]) &amp; (di[&#39;y&#39;]&lt;=pcts_y[j+1])] nc = i * n_cuts + j print(i, j, nc, len(dj)) axes[i, j].scatter(dj[&#39;x&#39;], dj[&#39;y&#39;], s=0.1, color=colors[nc]) . 0 6368 0 0 0 1592 0 1 1 1592 0 2 2 1592 0 3 3 1592 1 6368 1 0 4 1592 1 1 5 1592 1 2 6 1592 1 3 7 1592 2 6368 2 0 8 1592 2 1 9 1592 2 2 10 1592 2 3 11 1592 3 6368 3 0 12 1592 3 1 13 1592 3 2 14 1592 3 3 15 1592 . plot all the blocks on the some canvas . fig, axes = plt.subplots(figsize=(24, 24)) for i in range(n_cuts): pcts_x = [np.percentile(df[&#39;x&#39;], p) for p in pcts] di = df[(df[&#39;x&#39;]&gt;=pcts_x[i]) &amp; (df[&#39;x&#39;]&lt;=pcts_x[i+1])] pcts_y = [np.percentile(di[&#39;y&#39;], p) for p in pcts] print(i, len(di)) for j in range(n_cuts): dj = di[(di[&#39;y&#39;]&gt;=pcts_y[j]) &amp; (di[&#39;y&#39;]&lt;=pcts_y[j+1])] nc = i * n_cuts + j print(i, j, n_cuts, len(dj)) axes.scatter(dj[&#39;x&#39;], dj[&#39;y&#39;], s=0.1, color=colors[nc]) . 0 6368 0 0 4 1592 0 1 4 1592 0 2 4 1592 0 3 4 1592 1 6368 1 0 4 1592 1 1 4 1592 1 2 4 1592 1 3 4 1592 2 6368 2 0 4 1592 2 1 4 1592 2 2 4 1592 2 3 4 1592 3 6368 3 0 4 1592 3 1 4 1592 3 2 4 1592 3 3 4 1592 . collect the code . def percentile_split(X, n_cuts=4): pcts = np.linspace(0, 100, n_cuts+1) df = pd.DataFrame(X, columns=[&#39;x&#39;, &#39;y&#39;]) ds = {} for i in range(n_cuts): pcts_x = [np.percentile(df[&#39;x&#39;], p) for p in pcts] di = df[(df[&#39;x&#39;]&gt;=pcts_x[i]) &amp; (df[&#39;x&#39;]&lt;=pcts_x[i+1])] pcts_y = [np.percentile(di[&#39;y&#39;], p) for p in pcts] for j in range(n_cuts): dj = di[(di[&#39;y&#39;]&gt;=pcts_y[j]) &amp; (di[&#39;y&#39;]&lt;=pcts_y[j+1])] ds[&#39;&#39;.join([str(i), &#39;_&#39;, str(j)])] = dj return ds . ds = percentile_split(X) for k, v in ds.items(): print(k, v.shape) . 0_0 (1592, 2) 0_1 (1592, 2) 0_2 (1592, 2) 0_3 (1592, 2) 1_0 (1592, 2) 1_1 (1592, 2) 1_2 (1592, 2) 1_3 (1592, 2) 2_0 (1592, 2) 2_1 (1592, 2) 2_2 (1592, 2) 2_3 (1592, 2) 3_0 (1592, 2) 3_1 (1592, 2) 3_2 (1592, 2) 3_3 (1592, 2) . ds[&#39;0_0&#39;].head() . x y . 1 -6.226313 | 2.614249 | . 36 -5.592859 | 3.137063 | . 40 -6.091045 | 3.128367 | . 68 -6.191662 | 3.257253 | . 78 -6.107693 | 2.870360 | . fig, axes = plt.subplots(figsize=(24, 24)) for i, (k, v) in enumerate(ds.items()): # print(i, v.shape) axes.scatter(v[&#39;x&#39;], v[&#39;y&#39;], s=0.1, color=colors[i]) . test the function with different number of splits . n_cuts = 8 ds = percentile_split(X, n_cuts) len(ds) . 64 . colors = [&#39;#%06X&#39; % np.random.randint(0, 0xFFFFFF) for _ in range(n_cuts**2)] fig, axes = plt.subplots(figsize=(24, 24)) for i, (k, v) in enumerate(ds.items()): # print(i, v.shape) axes.scatter(v[&#39;x&#39;], v[&#39;y&#39;], s=0.1, color=colors[i]) . with 100 splits, in 2 dimension this will split the data in 10 thousand blocks. . as the number of splits gets bigger and bigger, it will be more and more difficult to differentiate the individual blocks . Doing linear assignments on individual blocks . Let&#39;s go back to a smaller number of splits and apply the lapjv algorithm on each split. . n_cuts = 4 ds = percentile_split(X, n_cuts) len(ds) . 16 . use the grid defined by the biggest block . for k, v in ds.items(): print(k, v.shape) . 0_0 (1592, 2) 0_1 (1592, 2) 0_2 (1592, 2) 0_3 (1592, 2) 1_0 (1592, 2) 1_1 (1592, 2) 1_2 (1592, 2) 1_3 (1592, 2) 2_0 (1592, 2) 2_1 (1592, 2) 2_2 (1592, 2) 2_3 (1592, 2) 3_0 (1592, 2) 3_1 (1592, 2) 3_2 (1592, 2) 3_3 (1592, 2) . lens = [len(v) for _, v in ds.items()] length = max(lens) . size1 = int(np.ceil(np.sqrt(length))) size2 = int(np.ceil(length/size1)) grid_size = (size1, size2) . grid = np.dstack(np.meshgrid(np.linspace(0, 1, size2), np.linspace(0, 1, size1))).reshape(-1, 2) grid_map = grid[:length] # non-rectangular grid . jvs = {} for k, v in ds.items(): print(&quot;Doing JV assignment on &quot;, k) cost_matrix = cdist(grid_map, v, &quot;sqeuclidean&quot;) cost_matrix = cost_matrix * (100000 / cost_matrix.max()) row_asses, col_asses, _ = lapjv(cost_matrix) grid_jv = grid_map[col_asses] jvs[k] = (v, grid_jv) print(&quot;Assignment finished&quot;) . Doing JV assignment on 0_0 Doing JV assignment on 0_1 Doing JV assignment on 0_2 Doing JV assignment on 0_3 Doing JV assignment on 1_0 Doing JV assignment on 1_1 Doing JV assignment on 1_2 Doing JV assignment on 1_3 Doing JV assignment on 2_0 Doing JV assignment on 2_1 Doing JV assignment on 2_2 Doing JV assignment on 2_3 Doing JV assignment on 3_0 Doing JV assignment on 3_1 Doing JV assignment on 3_2 Doing JV assignment on 3_3 Assignment finished . np.random.choice([0, 1, 2, 3], size=10) . array([1, 0, 1, 1, 2, 3, 3, 2, 2, 1]) . fig, axes = plt.subplots(n_cuts, n_cuts, figsize=(24, 16), sharex=True, sharey=True) axes = axes.flatten() for i, (k, (v, grid_jv)) in enumerate(jvs.items()): print(i, k, v.shape) labels = np.random.choice([0, 1, 2, 3], size=len(v)) for j, end in enumerate(grid_jv): axes[i].plot(end[0], end[1], color=colors[labels[j]], marker=&#39;o&#39;); . 0 0_0 (1592, 2) 1 0_1 (1592, 2) 2 0_2 (1592, 2) 3 0_3 (1592, 2) 4 1_0 (1592, 2) 5 1_1 (1592, 2) 6 1_2 (1592, 2) 7 1_3 (1592, 2) 8 2_0 (1592, 2) 9 2_1 (1592, 2) 10 2_2 (1592, 2) 11 2_3 (1592, 2) 12 3_0 (1592, 2) 13 3_1 (1592, 2) 14 3_2 (1592, 2) 15 3_3 (1592, 2) . Finally we can collage them together. . Here the JV assignment are done sequentially in a for loop; if we have a big number of splits (10 thousand), and each block have much bigger number of data points (10 to 20 thousand data points), we&#39;d need to parallelise them properly. . This is what we&#39;ll do next. .",
            "url": "https://riversdark.github.io/variation/data/2022/07/06/binning.html",
            "relUrl": "/data/2022/07/06/binning.html",
            "date": " • Jul 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://riversdark.github.io/variation/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://riversdark.github.io/variation/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://riversdark.github.io/variation/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://riversdark.github.io/variation/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}